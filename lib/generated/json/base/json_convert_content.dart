// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:gether_music/model/tongzhong_entity.dart';
import 'package:gether_music/generated/json/tongzhong_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case TongZhongSearchEntity:
				return tongZhongSearchEntityFromJson(data as TongZhongSearchEntity, json) as T;
			case TongZhongApiSearchEntity:
				return tongZhongApiSearchEntityFromJson(data as TongZhongApiSearchEntity, json) as T;
			case TongZongApiSearchDataEntity:
				return tongZongApiSearchDataEntityFromJson(data as TongZongApiSearchDataEntity, json) as T;
			case TongZhongSearchSongs:
				return tongZhongSearchSongsFromJson(data as TongZhongSearchSongs, json) as T;
			case TongZhongSearchSongsAlbum:
				return tongZhongSearchSongsAlbumFromJson(data as TongZhongSearchSongsAlbum, json) as T;
			case TongZhongSearchSongsArtists:
				return tongZhongSearchSongsArtistsFromJson(data as TongZhongSearchSongsArtists, json) as T;
			case TongzhongSongEntity:
				return tongzhongSongEntityFromJson(data as TongzhongSongEntity, json) as T;
			case TongzhongSongData:
				return tongzhongSongDataFromJson(data as TongzhongSongData, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TongZhongSearchEntity:
				return tongZhongSearchEntityToJson(data as TongZhongSearchEntity);
			case TongZhongApiSearchEntity:
				return tongZhongApiSearchEntityToJson(data as TongZhongApiSearchEntity);
			case TongZongApiSearchDataEntity:
				return tongZongApiSearchDataEntityToJson(data as TongZongApiSearchDataEntity);
			case TongZhongSearchSongs:
				return tongZhongSearchSongsToJson(data as TongZhongSearchSongs);
			case TongZhongSearchSongsAlbum:
				return tongZhongSearchSongsAlbumToJson(data as TongZhongSearchSongsAlbum);
			case TongZhongSearchSongsArtists:
				return tongZhongSearchSongsArtistsToJson(data as TongZhongSearchSongsArtists);
			case TongzhongSongEntity:
				return tongzhongSongEntityToJson(data as TongzhongSongEntity);
			case TongzhongSongData:
				return tongzhongSongDataToJson(data as TongzhongSongData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TongZhongSearchEntity).toString()){
			return TongZhongSearchEntity().fromJson(json);
		}
		if(type == (TongZhongApiSearchEntity).toString()){
			return TongZhongApiSearchEntity().fromJson(json);
		}
		if(type == (TongZongApiSearchDataEntity).toString()){
			return TongZongApiSearchDataEntity().fromJson(json);
		}
		if(type == (TongZhongSearchSongs).toString()){
			return TongZhongSearchSongs().fromJson(json);
		}
		if(type == (TongZhongSearchSongsAlbum).toString()){
			return TongZhongSearchSongsAlbum().fromJson(json);
		}
		if(type == (TongZhongSearchSongsArtists).toString()){
			return TongZhongSearchSongsArtists().fromJson(json);
		}
		if(type == (TongzhongSongEntity).toString()){
			return TongzhongSongEntity().fromJson(json);
		}
		if(type == (TongzhongSongData).toString()){
			return TongzhongSongData().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<TongZhongSearchEntity>[] is M){
			return data.map<TongZhongSearchEntity>((e) => TongZhongSearchEntity().fromJson(e)).toList() as M;
		}
		if(<TongZhongApiSearchEntity>[] is M){
			return data.map<TongZhongApiSearchEntity>((e) => TongZhongApiSearchEntity().fromJson(e)).toList() as M;
		}
		if(<TongZongApiSearchDataEntity>[] is M){
			return data.map<TongZongApiSearchDataEntity>((e) => TongZongApiSearchDataEntity().fromJson(e)).toList() as M;
		}
		if(<TongZhongSearchSongs>[] is M){
			return data.map<TongZhongSearchSongs>((e) => TongZhongSearchSongs().fromJson(e)).toList() as M;
		}
		if(<TongZhongSearchSongsAlbum>[] is M){
			return data.map<TongZhongSearchSongsAlbum>((e) => TongZhongSearchSongsAlbum().fromJson(e)).toList() as M;
		}
		if(<TongZhongSearchSongsArtists>[] is M){
			return data.map<TongZhongSearchSongsArtists>((e) => TongZhongSearchSongsArtists().fromJson(e)).toList() as M;
		}
		if(<TongzhongSongEntity>[] is M){
			return data.map<TongzhongSongEntity>((e) => TongzhongSongEntity().fromJson(e)).toList() as M;
		}
		if(<TongzhongSongData>[] is M){
			return data.map<TongzhongSongData>((e) => TongzhongSongData().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}